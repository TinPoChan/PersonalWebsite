@page "/add-project"
@inject ProjectsClient ProjectsClient

@rendermode InteractiveServer

@inject NavigationManager NavigationManager

<PageTitle>Add Project</PageTitle>

<h1>Add Project</h1>

<EditForm 
    Model="@project" 
    FormName="addproject" 
    OnValidSubmit="HandleSubmitAsync" 
    > 

    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Name</label>
        <InputText id="name" class="form-control" @bind-Value="project.Name" />
    </div>

    <div class="form-group">
        <label for="description">Description</label>
        <InputText id="description" class="form-control" @bind-Value="project.Description" />
    </div>

    <div class="form-group">
        <label for="repositoryUrl">Repository Url</label>
        <InputText id="repositoryUrl" class="form-control" @bind-Value="project.RepositoryUrl" />
    </div>

    <div class="form-group">
        <label for="projectUrl">Project Url</label>
        <InputText id="projectUrl" class="form-control" @bind-Value="project.ProjectUrl" />
    </div>

    <div class="form-group">
        <label for="imageUrl">Image Url</label>
        <InputText id="imageUrl" class="form-control" @bind-Value="project.ImageUrl" />
    </div>

    @* string[] Tags *@
    <div class="form-group">
        <label for="tags">Tags</label>
        <InputText id="tags" class="form-control" @bind-Value="TagsString" />
    </div>

    <div class="form-group">
        <label for="createdDate">Created Date</label>
        <InputDate id="createdDate" class="form-control" @bind-Value="project.CreatedDate" />
    </div>

    <button type="submit" class="btn btn-primary">Add Project</button>
    <a role="button" class="btn btn-secondary" href="/">Cancel</a>
</EditForm>


@code
{
    private ProjectSummary project = new ProjectSummary
    {
        Name = "",
        Description = "",
        RepositoryUrl = "",
        ImageUrl = "",
        Tags = new string[] { }
    };
    private string TagsString
    {
        get => string.Join(", ", project.Tags ?? Array.Empty<string>());
        set => project.Tags = value?.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries) ?? Array.Empty<string>();
    }

    private async Task HandleSubmitAsync()
    {
        await ProjectsClient.AddProjectAsync(project);
        NavigationManager.NavigateTo("/ProjectsDashboard");
    }

}